{"ast":null,"code":"\n// import React from 'react';\n// import PropTypes from 'prop-types';\n// import RowTable from './rowTable';\n\n// function TableShift({ tableArray }) {\n//   const [days, rows] = tableArray;\n\n//   return (\n//     <table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th>Shift</th>\n//           <th>Position</th>\n//           {days.map((day, index) => (\n//             <th key={index}>\n//               <div className=\"td-day\">\n//                 <h1 className=\"Font-big\">{day}</h1>\n//                 <h4 className=\"Font-small\">\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\n//                 </h4>\n//               </div>\n//             </th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {rows.map((row, index) => (\n//           <RowTable key={index} timePosition={row[0]} weekUser={row[1]} />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// TableShift.propTypes = {\n//   tableArray: PropTypes.arrayOf(\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\n//   ).isRequired,\n// };\n\n// export default TableShift;\n\n// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import RowTable from './rowTable';\n\n// function TableShift({ tableArray }) {\n//   const [days, rows] = tableArray;\n//   const [tableRows, setTableRows] = useState(rows);\n\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\n//     const updatedRows = tableRows.map((row, rIndex) => {\n//       if (rIndex === rowIndex) {\n//         if (field === 'timePosition') {\n//           row[0][colIndex] = value;\n//         } else if (field === 'weekUser') {\n//           row[1][colIndex] = value;\n//         }\n//       }\n//       return row;\n//     });\n//     setTableRows(updatedRows);\n//   };\n\n//   return (\n//     <table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th>Shift</th>\n//           <th>Position</th>\n//           {days.map((day, index) => (\n//             <th key={index}>\n//               <div className=\"td-day\">\n//                 <h1 className=\"Font-big\">{day}</h1>\n//                 <h4 className=\"Font-small\">\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\n//                 </h4>\n//               </div>\n//             </th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {tableRows.map((row, rowIndex) => (\n//           <RowTable\n//             key={rowIndex}\n//             timePosition={row[0]}\n//             weekUser={row[1]}\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\n//           />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// TableShift.propTypes = {\n//   tableArray: PropTypes.arrayOf(\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\n//   ).isRequired,\n// };\n\n// export default TableShift;\n\n// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import RowTable from './rowTable';\n\n// function TableShift({ tableArray }) {\n//   const [days, rows] = tableArray;\n//   const [tableRows, setTableRows] = useState(rows);\n\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\n//     const updatedRows = tableRows.map((row, rIndex) => {\n//       if (rIndex === rowIndex) {\n//         if (field === 'timePosition') {\n//           row[0][colIndex] = value;\n//         } else if (field === 'weekUser') {\n//           row[1][colIndex][0] = value;\n//         }\n//       }\n//       return row;\n//     });\n//     setTableRows(updatedRows);\n//   };\n\n//   return (\n//     <table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th>Shift</th>\n//           <th>Position</th>\n//           {days.map((day, index) => (\n//             <th key={index}>\n//               <div className=\"td-day\">\n//                 <h1 className=\"Font-big\">{day}</h1>\n//                 <h4 className=\"Font-small\">\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\n//                 </h4>\n//               </div>\n//             </th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {tableRows.map((row, rowIndex) => (\n//           <RowTable\n//             key={rowIndex}\n//             rowIndex={rowIndex}\n//             timePosition={row[0]}\n//             weekUser={row[1]}\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\n//           />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// TableShift.propTypes = {\n//   tableArray: PropTypes.arrayOf(\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\n//   ).isRequired,\n// };\n\n// export default TableShift;\n\n// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import RowTable from './rowTable';\n\n// function TableShift({ tableArray }) {\n//   const [days, rows] = tableArray;\n//   const [tableRows, setTableRows] = useState(rows);\n\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\n//     const updatedRows = tableRows.map((row, rIndex) => {\n//       if (rIndex === rowIndex) {\n//         if (field === 'timePosition') {\n//           row[0][colIndex] = value;\n//         } else if (field === 'weekUser') {\n//           row[1][colIndex][0] = value;\n//         }\n//       }\n//       return row;\n//     });\n//     setTableRows(updatedRows);\n//   };\n\n//   return (\n//     <table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th>Shift</th>\n//           <th>Position</th>\n//           {days.map((day, index) => (\n//             <th key={index}>\n//               <div className=\"td-day\">\n//                 <h1 className=\"Font-big\">{day}</h1>\n//                 <h4 className=\"Font-small\">\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\n//                 </h4>\n//               </div>\n//             </th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {tableRows.map((row, rowIndex) => (\n//           <RowTable\n//             key={rowIndex}\n//             rowIndex={rowIndex}\n//             timePosition={row[0]}\n//             weekUser={row[1]}\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\n//           />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// TableShift.propTypes = {\n//   tableArray: PropTypes.arrayOf(\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\n//   ).isRequired,\n// };\n\n// export default TableShift;\n\n// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import RowTable from './rowTable';\n\n// function TableShift({ tableArray }) {\n//   const [days, rows] = tableArray;\n//   const [tableRows, setTableRows] = useState(rows);\n\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\n//     const updatedRows = tableRows.map((row, rIndex) => {\n//       if (rIndex === rowIndex) {\n//         if (field === 'timePosition') {\n//           row[0][colIndex] = value;\n//         } else if (field === 'weekUser') {\n//           row[1][colIndex][0] = value;\n//         }\n//       }\n//       return row;\n//     });\n//     setTableRows(updatedRows);\n//   };\n\n//   return (\n//     <table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th>Shift</th>\n//           <th>Position</th>\n//           {days.map((day, index) => (\n//             <th key={index}>\n//               <div className=\"td-day\">\n//                 <h1 className=\"Font-big\">{day}</h1>\n//                 <h4 className=\"Font-small\">\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\n//                 </h4>\n//               </div>\n//             </th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {tableRows.map((row, rowIndex) => (\n//           <RowTable\n//             key={rowIndex}\n//             rowIndex={rowIndex}\n//             timePosition={row[0]}\n//             weekUser={row[1]}\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\n//           />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// TableShift.propTypes = {\n//   tableArray: PropTypes.arrayOf(\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\n//   ).isRequired,\n// };\n\n// export default TableShift;\n\n// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import RowTable from './rowTable';\n\n// function TableShift({ tableArray }) {\n//   const [days, rows] = tableArray;\n//   const [tableRows, setTableRows] = useState(rows);\n\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\n//     const updatedRows = tableRows.map((row, rIndex) => {\n//       if (rIndex === rowIndex) {\n//         if (field === 'timePosition') {\n//           row[0][colIndex] = value;\n//         } else if (field === 'weekUser') {\n//           row[1][colIndex] = value;\n//         }\n//       }\n//       return row;\n//     });\n//     setTableRows(updatedRows);\n//   };\n\n//   return (\n//     <table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th>Shift</th>\n//           <th>Position</th>\n//           {days.map((day, index) => (\n//             <th key={index}>\n//               <div className=\"td-day\">\n//                 <h1 className=\"Font-big\">{day}</h1>\n//                 <h4 className=\"Font-small\">\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\n//                 </h4>\n//               </div>\n//             </th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {tableRows.map((row, rowIndex) => (\n//           <RowTable\n//             key={rowIndex}\n//             rowIndex={rowIndex}\n//             timePosition={row[0]}\n//             weekUser={row[1]}\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\n//           />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// TableShift.propTypes = {\n//   tableArray: PropTypes.arrayOf(\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\n//   ).isRequired,\n// };\n\n// export default TableShift;","map":{"version":3,"names":[],"sources":["C:/Users/naama/OneDrive/מסמכים/university/FinalProject/react_schedy/schedy/src/components/tableShift.js"],"sourcesContent":["\r\n// import React from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import RowTable from './rowTable';\r\n\r\n// function TableShift({ tableArray }) {\r\n//   const [days, rows] = tableArray;\r\n\r\n//   return (\r\n//     <table className=\"table\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>Shift</th>\r\n//           <th>Position</th>\r\n//           {days.map((day, index) => (\r\n//             <th key={index}>\r\n//               <div className=\"td-day\">\r\n//                 <h1 className=\"Font-big\">{day}</h1>\r\n//                 <h4 className=\"Font-small\">\r\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n//                 </h4>\r\n//               </div>\r\n//             </th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {rows.map((row, index) => (\r\n//           <RowTable key={index} timePosition={row[0]} weekUser={row[1]} />\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// TableShift.propTypes = {\r\n//   tableArray: PropTypes.arrayOf(\r\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n//   ).isRequired,\r\n// };\r\n\r\n// export default TableShift;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import RowTable from './rowTable';\r\n\r\n// function TableShift({ tableArray }) {\r\n//   const [days, rows] = tableArray;\r\n//   const [tableRows, setTableRows] = useState(rows);\r\n\r\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\r\n//     const updatedRows = tableRows.map((row, rIndex) => {\r\n//       if (rIndex === rowIndex) {\r\n//         if (field === 'timePosition') {\r\n//           row[0][colIndex] = value;\r\n//         } else if (field === 'weekUser') {\r\n//           row[1][colIndex] = value;\r\n//         }\r\n//       }\r\n//       return row;\r\n//     });\r\n//     setTableRows(updatedRows);\r\n//   };\r\n\r\n//   return (\r\n//     <table className=\"table\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>Shift</th>\r\n//           <th>Position</th>\r\n//           {days.map((day, index) => (\r\n//             <th key={index}>\r\n//               <div className=\"td-day\">\r\n//                 <h1 className=\"Font-big\">{day}</h1>\r\n//                 <h4 className=\"Font-small\">\r\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n//                 </h4>\r\n//               </div>\r\n//             </th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {tableRows.map((row, rowIndex) => (\r\n//           <RowTable\r\n//             key={rowIndex}\r\n//             timePosition={row[0]}\r\n//             weekUser={row[1]}\r\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\r\n//           />\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// TableShift.propTypes = {\r\n//   tableArray: PropTypes.arrayOf(\r\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n//   ).isRequired,\r\n// };\r\n\r\n// export default TableShift;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import RowTable from './rowTable';\r\n\r\n// function TableShift({ tableArray }) {\r\n//   const [days, rows] = tableArray;\r\n//   const [tableRows, setTableRows] = useState(rows);\r\n\r\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\r\n//     const updatedRows = tableRows.map((row, rIndex) => {\r\n//       if (rIndex === rowIndex) {\r\n//         if (field === 'timePosition') {\r\n//           row[0][colIndex] = value;\r\n//         } else if (field === 'weekUser') {\r\n//           row[1][colIndex][0] = value;\r\n//         }\r\n//       }\r\n//       return row;\r\n//     });\r\n//     setTableRows(updatedRows);\r\n//   };\r\n\r\n//   return (\r\n//     <table className=\"table\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>Shift</th>\r\n//           <th>Position</th>\r\n//           {days.map((day, index) => (\r\n//             <th key={index}>\r\n//               <div className=\"td-day\">\r\n//                 <h1 className=\"Font-big\">{day}</h1>\r\n//                 <h4 className=\"Font-small\">\r\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n//                 </h4>\r\n//               </div>\r\n//             </th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {tableRows.map((row, rowIndex) => (\r\n//           <RowTable\r\n//             key={rowIndex}\r\n//             rowIndex={rowIndex}\r\n//             timePosition={row[0]}\r\n//             weekUser={row[1]}\r\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\r\n//           />\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// TableShift.propTypes = {\r\n//   tableArray: PropTypes.arrayOf(\r\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n//   ).isRequired,\r\n// };\r\n\r\n// export default TableShift;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import RowTable from './rowTable';\r\n\r\n// function TableShift({ tableArray }) {\r\n//   const [days, rows] = tableArray;\r\n//   const [tableRows, setTableRows] = useState(rows);\r\n\r\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\r\n//     const updatedRows = tableRows.map((row, rIndex) => {\r\n//       if (rIndex === rowIndex) {\r\n//         if (field === 'timePosition') {\r\n//           row[0][colIndex] = value;\r\n//         } else if (field === 'weekUser') {\r\n//           row[1][colIndex][0] = value;\r\n//         }\r\n//       }\r\n//       return row;\r\n//     });\r\n//     setTableRows(updatedRows);\r\n//   };\r\n\r\n//   return (\r\n//     <table className=\"table\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>Shift</th>\r\n//           <th>Position</th>\r\n//           {days.map((day, index) => (\r\n//             <th key={index}>\r\n//               <div className=\"td-day\">\r\n//                 <h1 className=\"Font-big\">{day}</h1>\r\n//                 <h4 className=\"Font-small\">\r\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n//                 </h4>\r\n//               </div>\r\n//             </th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {tableRows.map((row, rowIndex) => (\r\n//           <RowTable\r\n//             key={rowIndex}\r\n//             rowIndex={rowIndex}\r\n//             timePosition={row[0]}\r\n//             weekUser={row[1]}\r\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\r\n//           />\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// TableShift.propTypes = {\r\n//   tableArray: PropTypes.arrayOf(\r\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n//   ).isRequired,\r\n// };\r\n\r\n// export default TableShift;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import RowTable from './rowTable';\r\n\r\n// function TableShift({ tableArray }) {\r\n//   const [days, rows] = tableArray;\r\n//   const [tableRows, setTableRows] = useState(rows);\r\n\r\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\r\n//     const updatedRows = tableRows.map((row, rIndex) => {\r\n//       if (rIndex === rowIndex) {\r\n//         if (field === 'timePosition') {\r\n//           row[0][colIndex] = value;\r\n//         } else if (field === 'weekUser') {\r\n//           row[1][colIndex][0] = value;\r\n//         }\r\n//       }\r\n//       return row;\r\n//     });\r\n//     setTableRows(updatedRows);\r\n//   };\r\n\r\n//   return (\r\n//     <table className=\"table\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>Shift</th>\r\n//           <th>Position</th>\r\n//           {days.map((day, index) => (\r\n//             <th key={index}>\r\n//               <div className=\"td-day\">\r\n//                 <h1 className=\"Font-big\">{day}</h1>\r\n//                 <h4 className=\"Font-small\">\r\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n//                 </h4>\r\n//               </div>\r\n//             </th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {tableRows.map((row, rowIndex) => (\r\n//           <RowTable\r\n//             key={rowIndex}\r\n//             rowIndex={rowIndex}\r\n//             timePosition={row[0]}\r\n//             weekUser={row[1]}\r\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\r\n//           />\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// TableShift.propTypes = {\r\n//   tableArray: PropTypes.arrayOf(\r\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n//   ).isRequired,\r\n// };\r\n\r\n// export default TableShift;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import RowTable from './rowTable';\r\n\r\n// function TableShift({ tableArray }) {\r\n//   const [days, rows] = tableArray;\r\n//   const [tableRows, setTableRows] = useState(rows);\r\n\r\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\r\n//     const updatedRows = tableRows.map((row, rIndex) => {\r\n//       if (rIndex === rowIndex) {\r\n//         if (field === 'timePosition') {\r\n//           row[0][colIndex] = value;\r\n//         } else if (field === 'weekUser') {\r\n//           row[1][colIndex] = value;\r\n//         }\r\n//       }\r\n//       return row;\r\n//     });\r\n//     setTableRows(updatedRows);\r\n//   };\r\n\r\n//   return (\r\n//     <table className=\"table\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>Shift</th>\r\n//           <th>Position</th>\r\n//           {days.map((day, index) => (\r\n//             <th key={index}>\r\n//               <div className=\"td-day\">\r\n//                 <h1 className=\"Font-big\">{day}</h1>\r\n//                 <h4 className=\"Font-small\">\r\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n//                 </h4>\r\n//               </div>\r\n//             </th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {tableRows.map((row, rowIndex) => (\r\n//           <RowTable\r\n//             key={rowIndex}\r\n//             rowIndex={rowIndex}\r\n//             timePosition={row[0]}\r\n//             weekUser={row[1]}\r\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\r\n//           />\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// TableShift.propTypes = {\r\n//   tableArray: PropTypes.arrayOf(\r\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n//   ).isRequired,\r\n// };\r\n\r\n// export default TableShift;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAcA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAacignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}