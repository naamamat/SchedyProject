{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naama\\\\OneDrive\\\\\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD\\\\university\\\\FinalProject\\\\react_schedy\\\\schedy\\\\src\\\\components\\\\tableShift.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import PropTypes from 'prop-types';\n// import RowTable from './rowTable';\n\n// function TableShift({ tableArray }) {\n//   const [days, rows] = tableArray;\n\n//   return (\n//     <table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th>Shift</th>\n//           <th>Position</th>\n//           {days.map((day, index) => (\n//             <th key={index}>\n//               <div className=\"td-day\">\n//                 <h1 className=\"Font-big\">{day}</h1>\n//                 <h4 className=\"Font-small\">\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\n//                 </h4>\n//               </div>\n//             </th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {rows.map((row, index) => (\n//           <RowTable key={index} timePosition={row[0]} weekUser={row[1]} />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// TableShift.propTypes = {\n//   tableArray: PropTypes.arrayOf(\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\n//   ).isRequired,\n// };\n\n// export default TableShift;\n\n// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import RowTable from './rowTable';\n\n// function TableShift({ tableArray }) {\n//   const [days, rows] = tableArray;\n//   const [tableRows, setTableRows] = useState(rows);\n\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\n//     const updatedRows = tableRows.map((row, rIndex) => {\n//       if (rIndex === rowIndex) {\n//         if (field === 'timePosition') {\n//           row[0][colIndex] = value;\n//         } else if (field === 'weekUser') {\n//           row[1][colIndex] = value;\n//         }\n//       }\n//       return row;\n//     });\n//     setTableRows(updatedRows);\n//   };\n\n//   return (\n//     <table className=\"table\">\n//       <thead>\n//         <tr>\n//           <th>Shift</th>\n//           <th>Position</th>\n//           {days.map((day, index) => (\n//             <th key={index}>\n//               <div className=\"td-day\">\n//                 <h1 className=\"Font-big\">{day}</h1>\n//                 <h4 className=\"Font-small\">\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\n//                 </h4>\n//               </div>\n//             </th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {tableRows.map((row, rowIndex) => (\n//           <RowTable\n//             key={rowIndex}\n//             timePosition={row[0]}\n//             weekUser={row[1]}\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\n//           />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// TableShift.propTypes = {\n//   tableArray: PropTypes.arrayOf(\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\n//   ).isRequired,\n// };\n\n// export default TableShift;\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport RowTable from './rowTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TableShift({\n  tableArray\n}) {\n  _s();\n  const [days, rows] = tableArray;\n  const [tableRows, setTableRows] = useState(rows);\n  const handleEdit = (rowIndex, colIndex, field, value) => {\n    const updatedRows = tableRows.map((row, rIndex) => {\n      if (rIndex === rowIndex) {\n        if (field === 'timePosition') {\n          row[0][colIndex] = value;\n        } else if (field === 'weekUser') {\n          row[1][colIndex][0] = value;\n        }\n      }\n      return row;\n    });\n    setTableRows(updatedRows);\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"table\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Shift\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Position\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), days.map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"td-day\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"Font-big\",\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"Font-small\",\n              children: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tableRows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(RowTable, {\n        rowIndex: rowIndex,\n        timePosition: row[0],\n        weekUser: row[1],\n        onEdit: (colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(TableShift, \"QFC7kIygvfgyNIMM6YlLFmhrisk=\");\n_c = TableShift;\nTableShift.propTypes = {\n  tableArray: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))).isRequired\n};\nexport default TableShift;\nvar _c;\n$RefreshReg$(_c, \"TableShift\");","map":{"version":3,"names":["React","useState","PropTypes","RowTable","jsxDEV","_jsxDEV","TableShift","tableArray","_s","days","rows","tableRows","setTableRows","handleEdit","rowIndex","colIndex","field","value","updatedRows","map","row","rIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","day","index","timePosition","weekUser","onEdit","_c","propTypes","arrayOf","oneOfType","string","array","isRequired","$RefreshReg$"],"sources":["C:/Users/naama/OneDrive/מסמכים/university/FinalProject/react_schedy/schedy/src/components/tableShift.js"],"sourcesContent":["\r\n// import React from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import RowTable from './rowTable';\r\n\r\n// function TableShift({ tableArray }) {\r\n//   const [days, rows] = tableArray;\r\n\r\n//   return (\r\n//     <table className=\"table\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>Shift</th>\r\n//           <th>Position</th>\r\n//           {days.map((day, index) => (\r\n//             <th key={index}>\r\n//               <div className=\"td-day\">\r\n//                 <h1 className=\"Font-big\">{day}</h1>\r\n//                 <h4 className=\"Font-small\">\r\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n//                 </h4>\r\n//               </div>\r\n//             </th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {rows.map((row, index) => (\r\n//           <RowTable key={index} timePosition={row[0]} weekUser={row[1]} />\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// TableShift.propTypes = {\r\n//   tableArray: PropTypes.arrayOf(\r\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n//   ).isRequired,\r\n// };\r\n\r\n// export default TableShift;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import RowTable from './rowTable';\r\n\r\n// function TableShift({ tableArray }) {\r\n//   const [days, rows] = tableArray;\r\n//   const [tableRows, setTableRows] = useState(rows);\r\n\r\n//   const handleEdit = (rowIndex, colIndex, field, value) => {\r\n//     const updatedRows = tableRows.map((row, rIndex) => {\r\n//       if (rIndex === rowIndex) {\r\n//         if (field === 'timePosition') {\r\n//           row[0][colIndex] = value;\r\n//         } else if (field === 'weekUser') {\r\n//           row[1][colIndex] = value;\r\n//         }\r\n//       }\r\n//       return row;\r\n//     });\r\n//     setTableRows(updatedRows);\r\n//   };\r\n\r\n//   return (\r\n//     <table className=\"table\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>Shift</th>\r\n//           <th>Position</th>\r\n//           {days.map((day, index) => (\r\n//             <th key={index}>\r\n//               <div className=\"td-day\">\r\n//                 <h1 className=\"Font-big\">{day}</h1>\r\n//                 <h4 className=\"Font-small\">\r\n//                   {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n//                 </h4>\r\n//               </div>\r\n//             </th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {tableRows.map((row, rowIndex) => (\r\n//           <RowTable\r\n//             key={rowIndex}\r\n//             timePosition={row[0]}\r\n//             weekUser={row[1]}\r\n//             onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\r\n//           />\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// TableShift.propTypes = {\r\n//   tableArray: PropTypes.arrayOf(\r\n//     PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n//   ).isRequired,\r\n// };\r\n\r\n// export default TableShift;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RowTable from './rowTable';\r\n\r\nfunction TableShift({ tableArray }) {\r\n  const [days, rows] = tableArray;\r\n  const [tableRows, setTableRows] = useState(rows);\r\n\r\n  const handleEdit = (rowIndex, colIndex, field, value) => {\r\n    const updatedRows = tableRows.map((row, rIndex) => {\r\n      if (rIndex === rowIndex) {\r\n        if (field === 'timePosition') {\r\n          row[0][colIndex] = value;\r\n        } else if (field === 'weekUser') {\r\n          row[1][colIndex][0] = value;\r\n        }\r\n      }\r\n      return row;\r\n    });\r\n    setTableRows(updatedRows);\r\n  };\r\n\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Shift</th>\r\n          <th>Position</th>\r\n          {days.map((day, index) => (\r\n            <th key={index}>\r\n              <div className=\"td-day\">\r\n                <h1 className=\"Font-big\">{day}</h1>\r\n                <h4 className=\"Font-small\">\r\n                  {[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]}\r\n                </h4>\r\n              </div>\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {tableRows.map((row, rowIndex) => (\r\n          <RowTable\r\n            key={rowIndex}\r\n            rowIndex={rowIndex}\r\n            timePosition={row[0]}\r\n            weekUser={row[1]}\r\n            onEdit={(colIndex, field, value) => handleEdit(rowIndex, colIndex, field, value)}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nTableShift.propTypes = {\r\n  tableArray: PropTypes.arrayOf(\r\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array]))\r\n  ).isRequired,\r\n};\r\n\r\nexport default TableShift;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}